// Trees (√°rvores)

//√°rvores s√£o estruturas de dados n√£o lineares usadas para organizar informa√ß√µes de forma hier√°rquica. Diferente de arrays ou listas, onde os dados s√£o armazenados de maneira sequencial, uma √°rvore √© composta por n√≥s (nodes), onde cada n√≥ pode ter zero ou mais n√≥s filhos, formando uma estrutura ramificada.

// Caracter√≠sticas principais das √°rvores em JavaScript

// N√≥ raiz: √â o n√≥ principal da √°rvore, sem nenhum pai.
// N√≥s filhos: S√£o n√≥s descendentes de outro n√≥ (n√≥ pai).
// Folhas: N√≥s que n√£o possuem filhos.
// Sub√°rvore: Qualquer n√≥ com seus descendentes forma uma sub√°rvore.

class TreeNode {
    constructor(value) {
        this.value = value;
        this.children = [];
    }

    addChild(node) {
        this.children.push(node);
    }

    removeChild(value) {
        this.children = this.children.filter(child => child.value !== value);
    }
}

class Tree {
    constructor(rootValue) {
        this.root = new TreeNode(rootValue);
    }

    traverseDFS(callback) {
        function recurse(node) {
            callback(node);

            node.children.forEach(child => recurse(child));
        }

        recurse(this.root);
    }

    // M√©todo para imprimir em formato de √°rvore
    printTree() {
        this.printTreeRecursive(this.root, "", true);
    }

    printTreeRecursive(node, prefix, isLast) {
        if (!node) return;

        // Imprime o n√≥ atual com a formata√ß√£o adequada
        console.log(prefix + (isLast ? "‚îî‚îÄ‚îÄ " : "‚îú‚îÄ‚îÄ ") + node.value);

        // Calcula o novo prefixo para os filhos
        const newPrefix = prefix + (isLast ? "    " : "‚îÇ   ");

        // Imprime todos os filhos
        for (let i = 0; i < node.children.length; i++) {
            const isLastChild = i === node.children.length - 1;
            this.printTreeRecursive(node.children[i], newPrefix, isLastChild);
        }
    }

    // Vers√£o alternativa com s√≠mbolos diferentes
    printTreeWithSymbols() {
        this.printTreeWithSymbolsRecursive(this.root, "", true);
    }

    printTreeWithSymbolsRecursive(node, prefix, isLast) {
        if (!node) return;

        // S√≠mbolo para o n√≥ atual
        const nodeSymbol = node.children.length === 0 ? "üçÉ" : "üåø";
        console.log(prefix + (isLast ? "‚îî‚îÄ " : "‚îú‚îÄ ") + nodeSymbol + " " + node.value);

        // Novo prefixo para os filhos
        const newPrefix = prefix + (isLast ? "   " : "‚îÇ  ");

        // Imprime filhos
        for (let i = 0; i < node.children.length; i++) {
            const isLastChild = i === node.children.length - 1;
            this.printTreeWithSymbolsRecursive(node.children[i], newPrefix, isLastChild);
        }
    }

    // Vers√£o com n√≠veis (profundidade)
    printTreeWithLevels() {
        this.printTreeWithLevelsRecursive(this.root, 0);
    }

    printTreeWithLevelsRecursive(node, level) {
        if (!node) return;

        const indent = "  ".repeat(level);
        const levelInfo = `(n√≠vel ${level})`;
        console.log(`${indent}${node.value} ${levelInfo}`);

        // Imprime filhos no pr√≥ximo n√≠vel
        node.children.forEach(child => {
            this.printTreeWithLevelsRecursive(child, level + 1);
        });
    }
}

const tree = new Tree('A');

const B = new TreeNode('B');
const C = new TreeNode('C');
const D = new TreeNode('D');
const E = new TreeNode('E');
const F = new TreeNode('F');
const G = new TreeNode('G');
const H = new TreeNode('H');

tree.root.addChild(B);
tree.root.addChild(C);
tree.root.addChild(D);

B.addChild(E);
B.addChild(F);

C.addChild(G);

G.addChild(H);

function printNode(node) {
    console.log(node.value);
}

tree.traverseDFS(printNode);

// Exemplo de impress√£o da √°rvore
console.log("\n√Årvore em formato de √°rvore:");
tree.printTree();

console.log("\n√Årvore com s√≠mbolos:");
tree.printTreeWithSymbols();

console.log("\n√Årvore com n√≠veis:");
tree.printTreeWithLevels();

console.log("üå≥ DIFERENTES FORMATOS DE VISUALIZA√á√ÉO DA √ÅRVORE:");
console.log("=".repeat(60));

console.log("\nüìã 1. Lista simples (DFS):");
tree.traverseDFS(printNode);

console.log("\nüå≤ 2. Formato de √°rvore tradicional:");
tree.printTree();

console.log("\nüé® 3. Formato com s√≠mbolos:");
tree.printTreeWithSymbols();

console.log("\nüìä 4. Formato com n√≠veis:");
tree.printTreeWithLevels();

console.log("\nüìù Estrutura da √°rvore criada:");
console.log("      A");
console.log("     /|\\");
console.log("    B C D");
console.log("   /| |");
console.log("  E F G");
console.log("      |");
console.log("      H");