/**
 * GUIA DE ESTUDOS PROGRESSIVO
 * Algoritmos e Estruturas de Dados - Roadmap Completo
 * 
 * Este guia fornece uma sequ√™ncia estruturada de estudos, desde o n√≠vel
 * iniciante at√© expert, com exerc√≠cios pr√°ticos e projetos.
 * 
 * Autor: Algoritmos e Estruturas de Dados
 * Data: 2024
 */

console.log('='.repeat(100));
console.log('üìö GUIA DE ESTUDOS - ESTRUTURAS DE DADOS E ALGORITMOS');
console.log('='.repeat(100));

/**
 * METODOLOGIA DE ESTUDOS
 * 
 * 1. Teoria + Pr√°tica
 * 2. Implementa√ß√£o manual
 * 3. An√°lise de complexidade
 * 4. Casos de uso reais
 * 5. Exerc√≠cios progressivos
 */

// =============================================
// N√çVEL 1: BEGINNERS (4-6 semanas)
// =============================================

console.log('\nüå± N√çVEL 1: BEGINNERS - FUNDAMENTOS');
console.log('‚îÄ'.repeat(60));

const NIVEL_BEGINNERS = {
    semana1: {
        titulo: 'Fundamentos e Estruturas Lineares',
        topicos: [
            'Conceitos b√°sicos: Complexidade de tempo e espa√ßo',
            'Nota√ß√£o Big O, Omega e Theta',
            'Stack (Pilha) - LIFO',
            'Queue (Fila) - FIFO'
        ],
        arquivos: [
            'Beginners/Stack.js',
            'Beginners/Queue.js'
        ],
        exercicios: [
            'Implementar calculadora com parenteses usando Stack',
            'Simular impressora com Queue',
            'Converter nota√ß√£o infixa para p√≥s-fixa',
            'Implementar deque (double-ended queue)'
        ],
        projetos: [
            'Sistema de navega√ß√£o (back/forward) usando duas stacks',
            'Simulador de atendimento em banco com m√∫ltiplas filas'
        ]
    },

    semana2: {
        titulo: 'Listas Ligadas e Varia√ß√µes',
        topicos: [
            'Lista Simplesmente Ligada',
            'Lista Duplamente Ligada',
            'Lista Circular',
            'Opera√ß√µes: inser√ß√£o, remo√ß√£o, busca'
        ],
        arquivos: [
            'Beginners/Lists/SimplyLinkedList.js',
            'Beginners/Lists/LinkedList.js'
        ],
        exercicios: [
            'Reverter lista ligada iterativa e recursivamente',
            'Detectar ciclo em lista (Floyd\'s Algorithm)',
            'Merge de duas listas ordenadas',
            'Remover duplicatas de lista ordenada'
        ],
        projetos: [
            'Editor de texto simples com undo/redo',
            'Playlist de m√∫sica com navega√ß√£o bidirecional'
        ]
    },

    semana3: {
        titulo: 'Introdu√ß√£o √†s √Årvores',
        topicos: [
            'Conceitos b√°sicos de √°rvores',
            '√Årvore Bin√°ria',
            'Traversals: preorder, inorder, postorder',
            'Busca Bin√°ria em arrays'
        ],
        arquivos: [
            'Beginners/Trees/Trees.js',
            'Beginners/Trees/BinarySearch.js'
        ],
        exercicios: [
            'Implementar todos os tipos de traversal',
            'Encontrar altura e largura da √°rvore',
            'Verificar se √°rvore √© balanceada',
            'Busca bin√°ria iterativa e recursiva'
        ],
        projetos: [
            '√Årvore geneal√≥gica com navega√ß√£o',
            'Sistema de busca em cat√°logo ordenado'
        ]
    },

    semana4: {
        titulo: '√Årvore de Busca Bin√°ria (BST)',
        topicos: [
            'Propriedades da BST',
            'Inser√ß√£o, busca e remo√ß√£o',
            'Casos especiais na remo√ß√£o',
            'An√°lise de complexidade'
        ],
        arquivos: [
            'Beginners/Trees/BST.js'
        ],
        exercicios: [
            'Validar se √°rvore √© BST v√°lida',
            'Encontrar k-√©simo menor elemento',
            'Converter BST para lista ligada',
            'Encontrar LCA (Lowest Common Ancestor)'
        ],
        projetos: [
            'Sistema de indexa√ß√£o de documentos',
            'Dicion√°rio com busca r√°pida'
        ]
    },

    semana5: {
        titulo: 'Grafos - Conceitos B√°sicos',
        topicos: [
            'Representa√ß√£o: matriz e lista de adjac√™ncia',
            'DFS (Depth-First Search)',
            'BFS (Breadth-First Search)',
            'Componentes conectados'
        ],
        arquivos: [
            'Beginners/Trees/Graph.js'
        ],
        exercicios: [
            'Detectar ciclo em grafo direcionado/n√£o-direcionado',
            'Encontrar caminho entre dois v√©rtices',
            'Contar componentes conectados',
            'Ordena√ß√£o topol√≥gica'
        ],
        projetos: [
            'Rede social simples com amizades',
            'Mapa de rotas entre cidades'
        ]
    },

    semana6: {
        titulo: 'Memoiza√ß√£o e Introdu√ß√£o √† DP',
        topicos: [
            'Conceitos de memoiza√ß√£o',
            'Top-down vs Bottom-up',
            'Problemas cl√°ssicos: Fibonacci, Factorial',
            'An√°lise de trade-offs espa√ßo-tempo'
        ],
        arquivos: [
            'Beginners/Memoize/memoization-demo.js',
            'Beginners/Memoize/memoization-step-by-step.js',
            'Beginners/Memoize/keys-demonstration.js'
        ],
        exercicios: [
            'Implementar memoiza√ß√£o para problemas diversos',
            'Climbing stairs problem',
            'Coin change problem (vers√£o simples)',
            'Longest increasing subsequence'
        ],
        projetos: [
            'Calculadora de sequ√™ncias matem√°ticas otimizada',
            'Sistema de cache para fun√ß√µes custosas'
        ]
    }
};

// =============================================
// N√çVEL 2: INTERMEDIATE (6-8 semanas)
// =============================================

console.log('\nüåø N√çVEL 2: INTERMEDIATE - ESTRUTURAS AVAN√áADAS');
console.log('‚îÄ'.repeat(60));

const NIVEL_INTERMEDIATE = {
    semana1_2: {
        titulo: 'Hash Tables e Fun√ß√µes Hash',
        topicos: [
            'Conceitos de hashing',
            'Fun√ß√µes hash: divis√£o, multiplica√ß√£o, universal',
            'Tratamento de colis√µes: chaining, open addressing',
            'Load factor e rehashing'
        ],
        arquivos: [
            'Intermediate/HashTable.js'
        ],
        exercicios: [
            'Implementar diferentes fun√ß√µes hash',
            'Two sum problem usando hash table',
            'Group anagrams',
            'Frequency counter problems'
        ],
        projetos: [
            'Sistema de cache LRU',
            'Contador de palavras em textos grandes'
        ]
    },

    semana3_4: {
        titulo: 'Heaps e Priority Queues',
        topicos: [
            'Propriedades de Min/Max Heap',
            'Heapify up/down',
            'Priority Queue implementation',
            'Heap Sort algorithm'
        ],
        arquivos: [
            'Intermediate/Heap.js'
        ],
        exercicios: [
            'K largest/smallest elements',
            'Merge K sorted arrays',
            'Find median in stream',
            'Task scheduler problem'
        ],
        projetos: [
            'Sistema de prioridades para tarefas',
            'Simulador de emergency room'
        ]
    },

    semana5_6: {
        titulo: 'Trie (Prefix Tree)',
        topicos: [
            'Estrutura do Trie',
            'Inser√ß√£o e busca de palavras',
            'Busca por prefixo',
            'Autocomplete e spell checker'
        ],
        arquivos: [
            'Intermediate/Trie.js'
        ],
        exercicios: [
            'Word search in 2D grid',
            'Longest common prefix',
            'Replace words problem',
            'Design search autocomplete system'
        ],
        projetos: [
            'Sistema de autocomplete para search engine',
            'Spell checker com sugest√µes'
        ]
    },

    semana7_8: {
        titulo: 'Revis√£o e Projetos Integradores',
        topicos: [
            'Combina√ß√£o de estruturas',
            'Design patterns para estruturas de dados',
            'An√°lise de trade-offs',
            'Otimiza√ß√£o de performance'
        ],
        exercicios: [
            'Design Twitter timeline',
            'LRU Cache implementation',
            'Design URL shortener',
            'Implement Redis-like key-value store'
        ],
        projetos: [
            'Mini database engine',
            'Sistema de recomenda√ß√£o b√°sico'
        ]
    }
};

// =============================================
// N√çVEL 3: ADVANCED (8-10 semanas)
// =============================================

console.log('\nüå≥ N√çVEL 3: ADVANCED - ESTRUTURAS ESPECIALIZADAS');
console.log('‚îÄ'.repeat(60));

const NIVEL_ADVANCED = {
    semana1_2: {
        titulo: '√Årvores Balanceadas - AVL',
        topicos: [
            'Necessidade de balanceamento',
            'Fator de balanceamento',
            'Rota√ß√µes: simples e duplas',
            'Inser√ß√£o e remo√ß√£o com rebalanceamento'
        ],
        arquivos: [
            'Advanced/AVLTree.js'
        ],
        exercicios: [
            'Implementar todas as rota√ß√µes',
            'Converter BST n√£o balanceada para AVL',
            'Range queries em AVL tree',
            'Persistent AVL tree'
        ],
        projetos: [
            'Sistema de indexa√ß√£o para base de dados',
            'Timeline ordenada para rede social'
        ]
    },

    semana3_4: {
        titulo: 'Red-Black Trees',
        topicos: [
            'Propriedades Red-Black',
            'Inser√ß√£o com fixup',
            'Remo√ß√£o com fixup',
            'Compara√ß√£o com AVL'
        ],
        arquivos: [
            'Advanced/RedBlackTree.js'
        ],
        exercicios: [
            'Validar propriedades Red-Black',
            'Contar n√≥s pretos em caminhos',
            'Implementar TreeMap usando RB Tree',
            'Interval tree usando RB Tree'
        ],
        projetos: [
            'Map/Dictionary implementation',
            'Sistema de intervalos para agenda'
        ]
    },

    semana5_6: {
        titulo: 'Segment Trees e Range Queries',
        topicos: [
            'Constru√ß√£o de Segment Tree',
            'Point updates e range queries',
            'Lazy propagation',
            'Varia√ß√µes: min, max, sum, XOR'
        ],
        arquivos: [
            'Advanced/SegmentTree.js'
        ],
        exercicios: [
            'Range minimum/maximum query',
            'Range sum with updates',
            '2D segment tree',
            'Persistent segment tree'
        ],
        projetos: [
            'Sistema de analytics com range queries',
            'Game leaderboard com updates r√°pidos'
        ]
    },

    semana7_8: {
        titulo: 'Fenwick Tree (Binary Indexed Tree)',
        topicos: [
            'Conceito de Binary Indexed Tree',
            'Opera√ß√µes de update e query',
            'Range updates',
            'Aplica√ß√µes em counting'
        ],
        arquivos: [
            'Advanced/FenwickTree.js'
        ],
        exercicios: [
            'Count inversions in array',
            'Range sum queries',
            '2D Fenwick tree',
            'Coordinate compression'
        ],
        projetos: [
            'Sistema de ranking din√¢mico',
            'Frequency analysis tool'
        ]
    },

    semana9_10: {
        titulo: 'Skip Lists',
        topicos: [
            'Estrutura probabil√≠stica',
            'Multiple levels',
            'Insert, delete, search',
            'An√°lise probabil√≠stica'
        ],
        arquivos: [
            'Advanced/SkipList.js'
        ],
        exercicios: [
            'Range queries em Skip List',
            'Concurrent Skip List',
            'K-th element queries',
            'Persistent Skip List'
        ],
        projetos: [
            'Database index alternativo',
            'Ordered map implementation'
        ]
    }
};

// =============================================
// N√çVEL 4: EXPERT (10-12 semanas)
// =============================================

console.log('\nüèîÔ∏è N√çVEL 4: EXPERT - ESTRUTURAS ESPECIALIZADAS');
console.log('‚îÄ'.repeat(60));

const NIVEL_EXPERT = {
    semana1_3: {
        titulo: 'Suffix Trees e String Algorithms',
        topicos: [
            'Suffix Tree construction',
            'Ukkonen\'s algorithm',
            'Pattern matching',
            'Longest common substring'
        ],
        arquivos: [
            'Expert/SuffixTree.js'
        ],
        exercicios: [
            'All occurrences of pattern',
            'Longest repeated substring',
            'Suffix array construction',
            'LCP array construction'
        ],
        projetos: [
            'Full-text search engine',
            'Plagiarism detection system'
        ]
    },

    semana4_6: {
        titulo: 'Bloom Filters e Probabilistic Structures',
        topicos: [
            'Probabilistic membership testing',
            'Hash functions para Bloom Filter',
            'False positive analysis',
            'Counting Bloom Filter'
        ],
        arquivos: [
            'Expert/BloomFilter.js'
        ],
        exercicios: [
            'Optimal parameter selection',
            'Scalable Bloom Filter',
            'Cuckoo Filter implementation',
            'HyperLogLog for cardinality'
        ],
        projetos: [
            'Web crawler duplicate detection',
            'Cache system com Bloom Filter'
        ]
    },

    semana7_9: {
        titulo: 'Concurrent Data Structures',
        topicos: [
            'Lock-free programming',
            'Compare-and-swap operations',
            'ABA problem',
            'Memory ordering'
        ],
        arquivos: [
            'Expert/ConcurrentStructures.js'
        ],
        exercicios: [
            'Lock-free queue implementation',
            'Concurrent hash table',
            'Work-stealing queue',
            'Read-write locks'
        ],
        projetos: [
            'Multi-threaded task processor',
            'Concurrent cache system'
        ]
    },

    semana10_12: {
        titulo: 'Persistent Data Structures',
        topicos: [
            'Structural sharing',
            'Path copying',
            'Fat node method',
            'Persistent arrays e trees'
        ],
        arquivos: [
            'Expert/PersistentStructures.js'
        ],
        exercicios: [
            'Persistent hash map (HAMT)',
            'Persistent vector',
            'Undo/redo system',
            'Version control system'
        ],
        projetos: [
            'Functional programming library',
            'Version-controlled database'
        ]
    }
};

// =============================================
// PLANO DE ESTUDOS PERSONALIZADO
// =============================================

function gerarPlanoEstudos(nivelInicial = 'beginners', horasPorSemana = 10) {
    console.log('\nüìÖ PLANO DE ESTUDOS PERSONALIZADO');
    console.log('‚îÄ'.repeat(60));

    const planos = {
        beginners: NIVEL_BEGINNERS,
        intermediate: NIVEL_INTERMEDIATE,
        advanced: NIVEL_ADVANCED,
        expert: NIVEL_EXPERT
    };

    const nivelSelecionado = planos[nivelInicial];
    if (!nivelSelecionado) {
        console.log('‚ùå N√≠vel inv√°lido. Use: beginners, intermediate, advanced, expert');
        return;
    }

    console.log(`üéØ N√≠vel: ${nivelInicial.toUpperCase()}`);
    console.log(`‚è∞ Dedica√ß√£o: ${horasPorSemana} horas/semana`);

    let semanaAtual = 1;
    for (const [periodo, conteudo] of Object.entries(nivelSelecionado)) {
        console.log(`\nüìö ${conteudo.titulo}`);
        console.log(`   Per√≠odo: ${periodo} (Semana ${semanaAtual})`);

        console.log('   üìñ T√≥picos:');
        conteudo.topicos.forEach(topico => {
            console.log(`     ‚Ä¢ ${topico}`);
        });

        if (conteudo.arquivos) {
            console.log('   üìÅ Arquivos para estudar:');
            conteudo.arquivos.forEach(arquivo => {
                console.log(`     ‚Ä¢ ${arquivo}`);
            });
        }

        if (conteudo.exercicios) {
            console.log('   üèãÔ∏è  Exerc√≠cios pr√°ticos:');
            conteudo.exercicios.slice(0, 2).forEach(exercicio => {
                console.log(`     ‚Ä¢ ${exercicio}`);
            });
            if (conteudo.exercicios.length > 2) {
                console.log(`     ‚Ä¢ ... e mais ${conteudo.exercicios.length - 2} exerc√≠cios`);
            }
        }

        if (conteudo.projetos) {
            console.log('   üéØ Projetos sugeridos:');
            conteudo.projetos.forEach(projeto => {
                console.log(`     ‚Ä¢ ${projeto}`);
            });
        }

        const horasEstimadas = Math.ceil(horasPorSemana * (periodo.includes('_') ? 2 : 1));
        console.log(`   ‚è±Ô∏è  Tempo estimado: ${horasEstimadas} horas`);

        semanaAtual += periodo.includes('_') ? 2 : 1;
    }
}

// =============================================
// RECURSOS E FERRAMENTAS
// =============================================

console.log('\nüõ†Ô∏è RECURSOS E FERRAMENTAS RECOMENDADAS');
console.log('‚îÄ'.repeat(60));

const RECURSOS = {
    livros: [
        '"Introduction to Algorithms" - Cormen, Leiserson, Rivest, Stein',
        '"Data Structures and Algorithms Made Easy" - Narasimha Karumanchi',
        '"Algorithm Design Manual" - Steven Skiena',
        '"Cracking the Coding Interview" - Gayle McDowell'
    ],
    plataformas: [
        'LeetCode - Exerc√≠cios pr√°ticos',
        'HackerRank - Challenges progressivos',
        'Codeforces - Competitive programming',
        'GeeksforGeeks - Tutoriais detalhados'
    ],
    ferramentas: [
        'Visual Studio Code - Editor com debugging',
        'Chrome DevTools - Profiling de performance',
        'Big-O Cheat Sheet - Refer√™ncia r√°pida',
        'Algorithm Visualizer - Visualiza√ß√£o de algoritmos'
    ],
    comunidades: [
        'Stack Overflow - D√∫vidas t√©cnicas',
        'Reddit r/algorithms - Discuss√µes',
        'Discord/Slack groups - Estudo em grupo',
        'GitHub - Projetos open source'
    ]
};

console.log('üìö Livros recomendados:');
RECURSOS.livros.forEach(livro => console.log(`  ‚Ä¢ ${livro}`));

console.log('\nüíª Plataformas de pr√°tica:');
RECURSOS.plataformas.forEach(plataforma => console.log(`  ‚Ä¢ ${plataforma}`));

console.log('\nüîß Ferramentas √∫teis:');
RECURSOS.ferramentas.forEach(ferramenta => console.log(`  ‚Ä¢ ${ferramenta}`));

console.log('\nüë• Comunidades:');
RECURSOS.comunidades.forEach(comunidade => console.log(`  ‚Ä¢ ${comunidade}`));

// =============================================
// DICAS DE ESTUDO
// =============================================

console.log('\nüí° DICAS PARA MAXIMIZAR O APRENDIZADO');
console.log('‚îÄ'.repeat(60));

const DICAS_ESTUDO = [
    'üîÑ Implemente cada estrutura do zero antes de ver a solu√ß√£o',
    'üìä Sempre analise a complexidade temporal e espacial',
    'üß™ Teste suas implementa√ß√µes com casos extremos',
    'üìù Mantenha um caderno de anota√ß√µes com padr√µes',
    'üéØ Resolva problemas progressivamente mais dif√≠ceis',
    '‚è∞ Use t√©cnica Pomodoro para manter foco',
    'üë• Participe de grupos de estudo ou code review',
    'üîß Implemente em diferentes linguagens quando poss√≠vel',
    'üìà Me√ßa performance de suas implementa√ß√µes',
    'üé® Desenhe estruturas no papel para visualizar melhor'
];

DICAS_ESTUDO.forEach(dica => console.log(`  ${dica}`));

// =============================================
// CHECKLIST DE PROGRESSO
// =============================================

console.log('\n‚úÖ CHECKLIST DE PROGRESSO');
console.log('‚îÄ'.repeat(60));

function gerarChecklist() {
    const checklist = {
        beginners: [
            'Entendo nota√ß√£o Big O e sei analisar complexidade',
            'Posso implementar Stack e Queue do zero',
            'Domino opera√ß√µes em listas ligadas',
            'Sei fazer traversals em √°rvores bin√°rias',
            'Implemento BST com inser√ß√£o, busca e remo√ß√£o',
            'Entendo DFS e BFS em grafos',
            'Aplico memoiza√ß√£o para otimizar recurs√µes'
        ],
        intermediate: [
            'Implemento hash table com tratamento de colis√µes',
            'Construo min/max heap e priority queue',
            'Uso Trie para problemas de strings',
            'Combino estruturas para resolver problemas complexos'
        ],
        advanced: [
            'Implemento √°rvores AVL com rota√ß√µes',
            'Construo Red-Black tree corretamente',
            'Uso Segment Tree para range queries',
            'Aplico Fenwick Tree para problemas de soma',
            'Entendo Skip List e sua an√°lise probabil√≠stica'
        ],
        expert: [
            'Construo Suffix Tree usando algoritmo de Ukkonen',
            'Implemento Bloom Filter com an√°lise de falsos positivos',
            'Programa estruturas lock-free e concurrent',
            'Crio estruturas persistentes com structural sharing'
        ]
    };

    for (const [nivel, items] of Object.entries(checklist)) {
        console.log(`\n${nivel.toUpperCase()}:`);
        items.forEach((item, index) => {
            console.log(`  ${index + 1}. [ ] ${item}`);
        });
    }
}

gerarChecklist();

// =============================================
// EXECU√á√ÉO DE EXEMPLO
// =============================================

console.log('\n' + '='.repeat(100));
console.log('üöÄ EXEMPLO DE USO DO GUIA');
console.log('='.repeat(100));

// Gera plano personalizado para n√≠vel beginners
gerarPlanoEstudos('beginners', 10);

console.log('\n' + '='.repeat(100));
console.log('üéì GUIA DE ESTUDOS - BOM APRENDIZADO!');
console.log('='.repeat(100));

console.log('\nüìå LEMBRETES IMPORTANTES:');
console.log('  ‚Ä¢ A pr√°tica constante √© mais importante que a velocidade');
console.log('  ‚Ä¢ Entenda o "porqu√™" antes do "como"');
console.log('  ‚Ä¢ Implemente, teste, otimize, repita');
console.log('  ‚Ä¢ N√£o pule n√≠veis - cada base √© importante');
console.log('  ‚Ä¢ Mantenha consist√™ncia nos estudos');

export {
    NIVEL_BEGINNERS,
    NIVEL_INTERMEDIATE,
    NIVEL_ADVANCED,
    NIVEL_EXPERT,
    gerarPlanoEstudos,
    RECURSOS
};
